[{"name": "app.py", "content": "from shiny.express import input, ui, render\nfrom shinywidgets import render_plotly\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import reactive\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport base64\nfrom io import BytesIO\n\n\npenguins_df = load_penguins()\n\n@reactive.calc\ndef filtered_data():\n    selected_species = input.Selected_Species_List()\n    min_mass, max_mass = input.body_mass_range()\n    \n    \n    filtered_df = penguins_df[\n        (penguins_df[\"species\"].isin(selected_species)) &\n        (penguins_df[\"body_mass_g\"] >= min_mass) &\n        (penguins_df[\"body_mass_g\"] <= max_mass)\n    ]\n    return filtered_df\n\n\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar\")\n    \n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Penguin Metric\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n    ui.input_numeric(\"plotly_bin_count\", \"Number of Bins\", 50)\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bins\", 1, 50, 20)\n    \n    ui.input_checkbox_group(\n        \"Selected_Species_List\",\n        \"Species Selection\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        inline=False,\n    )\n    ui.input_slider(\n        \"body_mass_range\",\n        \"Body Mass Range (g)\",\n        min=penguins_df[\"body_mass_g\"].min(),\n        max=penguins_df[\"body_mass_g\"].max(),\n        value=(penguins_df[\"body_mass_g\"].min(), penguins_df[\"body_mass_g\"].max())\n    )\n    \n    ui.input_selectize(\n        \"scatter_x_axis\",\n        \"Scatter Plot X-Axis\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n        selected=\"body_mass_g\"\n    )\n    ui.input_selectize(\n        \"scatter_y_axis\",\n        \"Scatter Plot Y-Axis\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n        selected=\"flipper_length_mm\"\n    )\n\n    ui.hr()\n    ui.a(\n        \"Github\",\n        href=\"https://github.com/DarkwingDuff/cintel-02-data/tree/main\",\n        target=\"_blank\",\n    )\n\nwith ui.layout_columns():\n   \n    with ui.card(full_screen=True):\n        @render_plotly\n        def plot1():\n            filtered_df = filtered_data()\n            fig = px.histogram(\n                filtered_df,\n                x=\"bill_length_mm\",\n                title=\"Histogram of Bill Length\",\n                color_discrete_sequence=[\"orange\"]\n            )\n            fig.update_traces(marker_line_color=\"black\", marker_line_width=2)\n            return fig\n\n\n    with ui.card(full_screen=True):\n        @render_plotly\n        def plot2():\n            selected_attribute = input.selected_attribute()\n            bin_count = input.plotly_bin_count()\n            filtered_df = filtered_data()\n            fig = px.histogram(\n                filtered_df,\n                x=selected_attribute,\n                nbins=bin_count,\n                title=f\"Histogram of {selected_attribute.replace('_', ' ').title()}\",\n                color_discrete_sequence=[\"black\"]\n            )\n            fig.update_traces(marker_line_color=\"white\", marker_line_width=2)\n            return fig\n\n\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Scatterplot: Custom Axes\")\n\n        @render_plotly\n        def scatter_plot():\n            filtered_df = filtered_data()\n            x_axis = input.scatter_x_axis()\n            y_axis = input.scatter_y_axis()\n            fig = px.scatter(\n                filtered_df,\n                x=x_axis,\n                y=y_axis,\n                color=\"species\",\n                title=f\"Scatter Plot: {x_axis.replace('_', ' ').title()} vs {y_axis.replace('_', ' ').title()}\",\n                labels={x_axis: x_axis.replace('_', ' ').title(), y_axis: y_axis.replace('_', ' ').title()}\n            )\n            return fig\n\n\n    with ui.card(full_screen=True):\n        @render_plotly\n        def density_plot():\n            filtered_df = filtered_data()\n            fig = px.density_contour(\n                filtered_df,\n                x=\"bill_length_mm\",\n                y=\"flipper_length_mm\",\n                color=\"species\",\n                title=\"Density Plot: Bill Length vs Flipper Length by Species\",\n                labels={\"bill_length_mm\": \"Bill Length (mm)\", \"flipper_length_mm\": \"Flipper Length (mm)\"}\n            )\n            return fig\n\n\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        @render.data_frame\n        def data_table():\n            return render.DataTable(filtered_data(), selection_mode=\"row\")\n\n    with ui.card(full_screen=True):\n        @render.data_frame\n        def data_grid():\n            return render.DataGrid(filtered_data(), selection_mode=\"row\")\n\n\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        @render.plot(alt=\"Seaborn histogram of selected penguin metric.\")\n        def seaborn_histogram():\n            selected_attribute = input.selected_attribute()\n            bin_count = input.seaborn_bin_count()\n            filtered_df = filtered_data()\n            histplot = sns.histplot(\n                filtered_df[selected_attribute].dropna(), bins=bin_count, kde=True\n            )\n            histplot.set_title(f\"Seaborn Histogram of {selected_attribute.replace('_', ' ').title()}\")\n            histplot.set_xlabel(selected_attribute.replace('_', ' ').title())\n            histplot.set_ylabel(\"Count\")\n            return histplot\n", "type": "text"}]